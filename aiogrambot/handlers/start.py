from turtledemo.penrose import start

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

import aiogrambot.keyboards.reply as reply
import aiogrambot.keyboards.inline as inline
from aiogrambot.states.registration import Reg

start_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('''–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –≤–∫—É—Å –Ω–∞—Å—Ç–æ—è—â–µ–π –¥–æ–º–∞—à–Ω–µ–π –µ–¥—ã —Å –ú–∞–º–∏–Ω–æ–π –ö—É—Ö–Ω–µ–πüë©üèº‚Äçüç≥
''', reply_markup=inline.settings)

@start_router.message(Command('start2'))
async def cmd_start(message: Message):
    await message.reply(
        f'–ü—Ä–∏–≤–µ—Ç.\n–¢–≤–æ–π ID: {message.from_user.id}\n–ò–º—è: {message.from_user.first_name}',
    reply_markup=reply.main)

@start_router.message(Command('help'))
async def get_help(message: Message):
    await message.answer('–•–ï–õ–ü', reply_markup=await reply.cars())

@start_router.message(Command('help2'))
async def get_help(message: Message):
    await message.answer('–•–ï–õ–ü', reply_markup=await inline.inline_cars())

@start_router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?')
async def ok(message: Message):
    await message.answer('–û–ö')

@start_router.message(F.photo)
async def photo(message: Message):
    await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}' )

@start_router.message(Command('photo'))
async def get_photo(message: Message):
    # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
    await message.answer_photo(photo='photoID', caption='–û–ø–∏—Å–∞–Ω–∏–µ')


@start_router.callback_query(F.data == 'catalog')
async def catalog(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥!')
    # await callback.message.answer('–ü—Ä–∏–≤–µ—Ç')
    await callback.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤',
        reply_markup=await inline.inline_categories())


@start_router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {callback.data.split('_')[1]}!')
    # await callback.message.answer('hi')
    await callback.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        reply_markup=await inline.inline_goods(category_id=int(callback.data.split('_')[2])))



@start_router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@start_router.message(Reg.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

@start_router.message(Reg.number)
async def reg_three(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {data}')
    await state.clear()